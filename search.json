[{"path":"https://johanlassen.github.io/cXCMS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cXCMS authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://johanlassen.github.io/cXCMS/articles/HPC_workflow.html","id":"hcp-introduction","dir":"Articles","previous_headings":"","what":"HCP Introduction","title":"HPC workflow","text":"tutorial meant high performance computing users linux systems. tutorial walks following parts: Prerequisites Installation Workflow Setup Run workflow Details","code":""},{"path":"https://johanlassen.github.io/cXCMS/articles/HPC_workflow.html","id":"prerequisites","dir":"Articles","previous_headings":"HCP Introduction","what":"Prerequisites","title":"HPC workflow","text":"starting make sure anaconda git installed. Currently, workflow based gwf tested Slurm although SGE LSF also work. invite snakemake users push workflow well. Finally, important data available mzML files.","code":""},{"path":"https://johanlassen.github.io/cXCMS/articles/HPC_workflow.html","id":"installation","dir":"Articles","previous_headings":"HCP Introduction","what":"Installation","title":"HPC workflow","text":"Open terminal navigate project directory: Download workflow github Navigate workflow folder Now install dependencies using conda. might take time. Activate conda environment","code":"cd ~/home/users/path/to/experiment/ git clone http://github.com/JohanLassen/xcms_workflow cd xcms_workflow conda env create -n xcms_workflow -f environment.yml conda activate xcms_workflow"},{"path":"https://johanlassen.github.io/cXCMS/articles/HPC_workflow.html","id":"workflow-setup","dir":"Articles","previous_headings":"HCP Introduction","what":"Workflow Setup","title":"HPC workflow","text":"running workflow, edit setup.yaml file. setup file two categories parameters: making code work run_id (needed): Identifier run. Smart positive negative ionization must run. used name submitted jobs. input_path (needed): absolute path input data. Subdirectories allowed included file identifier output. E.g., data directory ./data/positive contain subdirectories ./data/positive/batch1 ./data/positive/batch2 output_path (strongly recommended): output directory. exist workflow generate automatically. sample_overview_path (optional): Currently experimental stage. Used defining groups samples. file must semicolon separated column named “sample_group” column named “sample_name”. sample_names must (least) unique substrings filenames, e.g., file ./datafolder/sample_id_123.mzML sample_name “sample_id_123” sufficient. CAMERA_RULES (optional): path adduct annotation rules (CAMERA R package). Default ones included workflow. improving xcms results: indicated workflow peak picking → grouping → alignment → grouping finally integration missing peaks. parameters step must set accordingly experiment. Natively looks like meant positive ionization data, see parameter descriptions :","code":"general:   run_id: run1   input_path: ./data/   output_path: ./experiment_results/   sample_overview_path: ./overview_pos.csv   CAMERA_RULES: ./camera_rules/rules_pos.csv xcms_parameters:   centwave:     mzdiff: 0.01     peakwidth: c(4,25)     ppm: 12     prefilter: c(3,500)     snthresh: 6   peak_grouping1:     binSize: 0.01     bw: 2.5     maxFeatures: 50     minFraction: 0.3   alignment:     extraPeaks: 5     family: gaussian     minFraction: 0.9     smooth: loess     span: 0.6   peak_grouping2:     binSize: 0.01     bw: 2.5     maxFeatures: 50     minFraction: 0.6"},{"path":"https://johanlassen.github.io/cXCMS/articles/HPC_workflow.html","id":"run-the-workflow","dir":"Articles","previous_headings":"HCP Introduction","what":"Run the workflow","title":"HPC workflow","text":"run workflow one must initiate gwf (remember activate conda environment). done per workflow directory. Now ready submit jobs. sure setup file correct - workflow submit bunch jobs (2*number files).","code":"gwf config set backend slurm gwf run"},{"path":"https://johanlassen.github.io/cXCMS/articles/HPC_workflow.html","id":"details","dir":"Articles","previous_headings":"HCP Introduction","what":"Details","title":"HPC workflow","text":"workflow generates schedule file (.csv file) output directory. workflow per run_id, meaning files corrupt can removed schedule file workflow can resubmitted without recomputing already finished parts. schedule file deleted next workflow resubmission generates new one including original files. workflow saves copy setup file, meaning always can recover settings experiment run . Just copy paste file workflow directory rerun analysis. tmp folder can deleted run, might beneficial keep peak_picked files batches added later . Additionally, possible load temporary files interactive R session preprocessed step needs quality assurance, plotting, another output desired user. outputs include feature table one column describing file names (including sub directories separated underscores) remaining columns representing features. also returns peak table containing adduct annotations. xcms users familiar formats.","code":""},{"path":[]},{"path":[]},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"defining-the-mzml-files-of-our-experiment-from-msdata-package","dir":"Articles","previous_headings":"Running the workflow on 2 files","what":"1. Defining the mzML files of our experiment (from msdata package)","title":"Tutorial","text":"#{r} data_files <- dir(system.file(\"sciex\", package = \"msdata\"), full.names = TRUE) data_files system, might want something like :","code":"data_folder <- \"~/path/to/experiment\" data_files <- list.files(data_folder, recursive=TRUE, full.names=TRUE)"},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"setting-output-files","dir":"Articles","previous_headings":"Running the workflow on 2 files","what":"2. Setting output files","title":"Tutorial","text":"note strongly advised use .rds file suffix although names work ```#{r} # Set temporary directlory (deleted session) tmp_dir <- “./tmp” #tempdir() peak_directory <- paste0(tmp_dir, “/peak_picked”) dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE) peak_files <- paste0(peak_directory, gsub(“.*/“,”/“, data_files)) peak_files <- gsub(”.mzML”, “.rds”, peak_files) peak_files <- gsub(“-”, “_“, peak_files) peak_files","code":"## 3. Running peak picking on one file at a time  ```#{r}  # Set the peak picking parameters cwp <- CentWaveParam()  for (i in seq_along(data_files)){   input  <- data_files[i]   output <- peak_files[i]      # if file exists continue   if (file.exists(output)) next   cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp) }"},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"merging-peak-picked-files-prior-to-peak-grouping","dir":"Articles","previous_headings":"Running the workflow on 2 files","what":"4. Merging peak picked files prior to peak grouping","title":"Tutorial","text":"step highly optimized compared previous methods, reducing running time nlog(n) n. practice matter less 1000 samples, range 5000-10000 samples go days hours processing time. +10000 sample range old method viable . function uses exact function original method uses workaround avoid redundant checks. ```#{r} output_peak_identified <- paste0(tmp_dir, “/peak_picked_dataset.rds”) cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)","code":"## Grouping 1  ```#{r}  msobject <- readr::read_rds(output_peak_identified) pdp      <- xcms::PeakDensityParam(sampleGroups = msobject@phenoData@data$group) msobject <- groupChromPeaks(msobject, pdp)"},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"alignment","dir":"Articles","previous_headings":"Running the workflow on 2 files","what":"Alignment","title":"Tutorial","text":"#{r} pgp      <- xcms::PeakGroupsParam() msobject <- adjustRtime(msobject, pgp)","code":""},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"grouping-2","dir":"Articles","previous_headings":"Running the workflow on 2 files","what":"Grouping 2","title":"Tutorial","text":"```#{r} pdp <- xcms::PeakDensityParam(sampleGroups = msobject@phenoData@data$group) msobject <- groupChromPeaks(msobject, pdp) output_integration_ready <- paste0(tmp_dir, “/integration_ready.rds”) readr::write_rds(msobject, output_integration_ready)","code":"## Integration This is the most memory consuming step in the analysis. Both in the original xcms and this HPC optimized version.  ```#{r} fcp           <- FillChromPeaksParam(expandMz = 0, expandRt = 0) output_step1  <- paste0(tmp_dir, \"/integration_package.rds\") prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = output_step1)"},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"extracting-peaks-from-the-spectras","dir":"Articles","previous_headings":"Running the workflow on 2 files > Grouping 2","what":"Extracting peaks from the spectras","title":"Tutorial","text":"memory intensive step. Beware always rerun files peaks depend previous steps ```#{r} # Change subdir peak_picked integrated output files (n=sample size) cFillChromPeaksStep2 step integration_files <- gsub(“peak_picked”, “integrated”, peak_files) (seq_along(integration_files)){ cFillChromPeaksStep2(input = output_step1, output = integration_files[], index = ) }","code":"```#{r} output <- paste0(tmp_dir, \"/preprocessing_output.rds\") cFillChromPeaksStep3(inputFromStep1 = output_step1, inputFromStep2 = integration_files, output = output)"},{"path":"https://johanlassen.github.io/cXCMS/articles/Tutorial.html","id":"output-of-preprocessing","dir":"Articles","previous_headings":"Running the workflow on 2 files","what":"Output of preprocessing","title":"Tutorial","text":"```#{r} ms_preprocessed <- read_rds(output) feature_name <- xcms::featureDefinitions(ms_preprocessed) |> as_tibble() |> mutate(feature_name = paste0(“M”, round(mzmed), “T”, round(rtmed)), feature_name = make.unique(feature_name)) |> pull(feature_name) feature_values <- xcms::featureValues(ms_preprocessed) |> as_tibble() |> mutate(feature_name = feature_name) |> pivot_longer(cols = -feature_name) |> pivot_wider(names_from = feature_name, values_from = value) head(feature_values) ```","code":""},{"path":"https://johanlassen.github.io/cXCMS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://johanlassen.github.io/cXCMS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lassen J (2024). cXCMS: xcms wrapper package high performance computation (HPC) cluster worfklows. R package version 0.1.2, https://johanlassen.github.io/cXCMS/.","code":"@Manual{,   title = {cXCMS: An xcms wrapper package for high performance computation (HPC) cluster worfklows},   author = {Johan Lassen},   year = {2024},   note = {R package version 0.1.2},   url = {https://johanlassen.github.io/cXCMS/}, }"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"cxcms","dir":"","previous_headings":"","what":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"goal cXCMS provide framework efficient high performance computing (HPC) untargeted LCMS data pre-processing. Also, package memory optimizes workflow laptops environments (MacOS Windows), allowing preprocessing larger sample sizes small PCs. source code used project Large-Scale metabolomics: Predicting biological age using 10,133 routine untargeted LC-MS measurements. Important notes package: preprocessing works MS1 data. MS2 data needed use regular xcms samples. cXCMS reduces memory (RAM) processing files parallel /sequentially given ressources available. Already peak called files recomputed, new data added. CPU time actually (slightly) worse XCMS files must read saved disk. Use XCMS everything fits memory. fully exploit parallel functionality, use computional workflows (e.g., snakemake gwf). New peak picking softwares continously published like refer MZmine OpenMS faster per file (haven’t tested large-scale untargeted data)","code":""},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"can install development version cXCMS GitHub : work without major errors. also refer HPC workflow (see articles).","code":"# install.packages(\"devtools\") devtools::install_github(\"johanLassen/cXCMS\")"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"cXCMS package dependent regular XCMS package ee aim make changes possible ease use maintenance package. ’s idea behind package: workflow makes peak picking peak integration parallel Reduce memory consumption Improve support multi-node high performance cluster processing. Hence, can reduce memory usage setups (local computing HPC) improve processing times HPC parallelization.","code":"library(cXCMS) library(xcms) library(tidyverse)"},{"path":[]},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"running-the-workflow-using-hpc","dir":"","previous_headings":"","what":"Running the workflow using HPC","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"See article","code":""},{"path":[]},{"path":[]},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"id_1-defining-the-mzml-files-of-our-experiment-from-msdata-package","dir":"","previous_headings":"Running the workflow locally > STEP 1 - Peak Identification","what":"1. Defining the mzML files of our experiment (from msdata package)","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"system, might want something like : paths files can continue","code":"data_files <- dir(system.file(\"sciex\", package = \"msdata\"), full.names = TRUE) data_files #> [1] \"C:/Users/johan/AppData/Local/R/win-library/4.3/msdata/sciex/20171016_POOL_POS_1_105-134.mzML\" #> [2] \"C:/Users/johan/AppData/Local/R/win-library/4.3/msdata/sciex/20171016_POOL_POS_3_105-134.mzML\" data_folder <- \"~/path/to/experiment\" data_files <- list.files(data_folder, recursive=TRUE, full.names=TRUE)"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"id_2-setting-output-files","dir":"","previous_headings":"","what":"2. Setting output files","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"note strongly advised use .rds file suffix although names work","code":"peak_directory <- \"./tmp/peak_picked\" dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)  peak_files <- paste0(peak_directory, gsub(\".*/\", \"/\", data_files)) peak_files <- gsub(\".mzML\", \".rds\", peak_files) peak_files <- gsub(\"-\", \"_\", peak_files)  peak_files #> [1] \"./tmp/peak_picked/20171016_POOL_POS_1_105_134.rds\" #> [2] \"./tmp/peak_picked/20171016_POOL_POS_3_105_134.rds\""},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"id_3-running-peak-picking-on-one-file-at-a-time","dir":"","previous_headings":"","what":"3. Running peak picking on one file at a time","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"","code":"# Set the peak picking parameters cwp <- CentWaveParam()  for (i in seq_along(data_files)){   input  <- data_files[i]   output <- peak_files[i]      # if file exists continue   if (file.exists(output)) next      cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp) }"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"id_4-merging-peak-picked-files-prior-to-peak-grouping","dir":"","previous_headings":"","what":"4. Merging peak picked files prior to peak grouping","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"step highly optimized compared previous methods, reducing running time nlog(n) n. practice matter less 1000 samples, range 5000-10000 samples go days hours processing time. +10000 sample range old method viable . function uses exact function original method uses workaround avoid redundant checks.","code":"output_peak_identified <- \"./tmp/peak_picked_dataset.rds\" cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"grouping-1","dir":"","previous_headings":"","what":"Grouping 1","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"","code":"msobject <- readr::read_rds(output_peak_identified) pdp      <- xcms::PeakDensityParam(sampleGroups = msobject@phenoData@data$group) msobject <- groupChromPeaks(msobject, pdp)"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"alignment","dir":"","previous_headings":"","what":"Alignment","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"","code":"pgp      <- xcms::PeakGroupsParam() msobject <- adjustRtime(msobject, pgp) #> Performing retention time correction using 10 peak groups. #> Warning in do_adjustRtime_peakGroups(chromPeaks(object, msLevel = msLevel), : #> Span too small for 'loess' and the available number of peak groups, resetting #> to 0.4 #> Applying retention time adjustment to the identified chromatographic peaks ... #> OK"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"grouping-2","dir":"","previous_headings":"","what":"Grouping 2","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"","code":"pdp      <- xcms::PeakDensityParam(sampleGroups = msobject@phenoData@data$group) msobject <- groupChromPeaks(msobject, pdp)  output_integration_ready <- \"./tmp/integration_ready.rds\" readr::write_rds(msobject, output_integration_ready)"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"integration","dir":"","previous_headings":"","what":"Integration","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"memory consuming step analysis. original xcms HPC optimized version.","code":"fcp           <- FillChromPeaksParam(expandMz = 0, expandRt = 0) output_step1  <- \"./tmp/integration_package.rds\" prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = output_step1)"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"extracting-peaks-from-the-spectras","dir":"","previous_headings":"Integration","what":"Extracting peaks from the spectras","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"memory intensive step. Beware always rerun files peaks depend previous steps","code":"# Change subdir from peak_picked to integrated for the output files (n=sample size) of cFillChromPeaksStep2 step integration_files <- gsub(\"peak_picked\", \"integrated\", peak_files)  for (i in seq_along(integration_files)){   cFillChromPeaksStep2(input = output_step1, output = integration_files[i], index = i) } #> Requesting 3 peaks from 20171016_POOL_POS_1_105-134.mzML ... got 3. #> Requesting 5 peaks from 20171016_POOL_POS_3_105-134.mzML ... got 5. output <- \"./tmp/preprocessing_output.rds\" cFillChromPeaksStep3(inputFromStep1 = output_step1, inputFromStep2 = integration_files, output = output) #> Object of class:  FillChromPeaksParam  #>  Parameters: #>  - expandMz: [1] 0 #>  - expandRt: [1] 0 #>  - ppm: [1] 0 #>  - fixedMz: [1] 0 #>  - fixedRt: [1] 0 #> NULL"},{"path":"https://johanlassen.github.io/cXCMS/index.html","id":"output-of-preprocessing","dir":"","previous_headings":"","what":"Output of preprocessing","title":"An xcms wrapper package for high performance computation (HPC) cluster worfklows","text":"","code":"ms_preprocessed <- read_rds(output) feature_name   <-    xcms::featureDefinitions(ms_preprocessed) |>    as_tibble() |>    mutate(feature_name = paste0(\"M\", round(mzmed), \"T\", round(rtmed)),          feature_name = make.unique(feature_name)) |>    pull(feature_name)  feature_values  <-    xcms::featureValues(ms_preprocessed) |>    as_tibble() |>    mutate(feature_name = feature_name) |>    pivot_longer(cols = -feature_name) |>    pivot_wider(names_from = feature_name, values_from = value)"},{"path":"https://johanlassen.github.io/cXCMS/reference/adjustRtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust retention time — adjustRtime","title":"Adjust retention time — adjustRtime","text":"Adjust retention time","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/adjustRtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust retention time — adjustRtime","text":"","code":"adjustRtime(object, param)"},{"path":"https://johanlassen.github.io/cXCMS/reference/adjustRtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust retention time — adjustRtime","text":"object ms object param xcms::PeakGroupsParam","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/adjustRtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust retention time — adjustRtime","text":"aligned ms object","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep1.html","id":null,"dir":"Reference","previous_headings":"","what":"Preparation for the computational intensive peak filling step — cFillChromPeaksStep1","title":"Preparation for the computational intensive peak filling step — cFillChromPeaksStep1","text":"cPrepFillChromPeaks, cGetChromPeakData, cFillChromPeaks small constructs fillChromPeaks. running functions suggested vignette, minimize RAM usage, thus making workflow scalable tens thousands files.","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preparation for the computational intensive peak filling step — cFillChromPeaksStep1","text":"","code":"cFillChromPeaksStep1(input, output, fcp)"},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preparation for the computational intensive peak filling step — cFillChromPeaksStep1","text":"input path XCMSset returned peak alignment step output path output file. file goes cFillChromPeaksStep2() fcp object returned xcms::FillChromPeaksParam()","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preparation for the computational intensive peak filling step — cFillChromPeaksStep1","text":"list object necessary objects cGetChromPeakData cFillChromPeaks functions","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep2.html","id":null,"dir":"Reference","previous_headings":"","what":"Intensive peak extraction step performed sample-wise — cFillChromPeaksStep2","title":"Intensive peak extraction step performed sample-wise — cFillChromPeaksStep2","text":"function second step peak filling process. performed file-wise parallel.","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intensive peak extraction step performed sample-wise — cFillChromPeaksStep2","text":"","code":"cFillChromPeaksStep2(input, output, index)"},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intensive peak extraction step performed sample-wise — cFillChromPeaksStep2","text":"input file index sample_info output tmp directory storage extracted peaks index index sample sample list (.e., first file=1, second file=2...)","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intensive peak extraction step performed sample-wise — cFillChromPeaksStep2","text":"res object final peak integration.","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep3.html","id":null,"dir":"Reference","previous_headings":"","what":"fill chrom peak function 3 — cFillChromPeaksStep3","title":"fill chrom peak function 3 — cFillChromPeaksStep3","text":"function third step peak filling process. collects files generates final integrated output (intragation missing values)","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fill chrom peak function 3 — cFillChromPeaksStep3","text":"","code":"cFillChromPeaksStep3(inputFromStep1, inputFromStep2, output)"},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fill chrom peak function 3 — cFillChromPeaksStep3","text":"inputFromStep1 Output cFillChromPeaksStep1() function inputFromStep2 Output cFillChromPeaksStep2() function output output contains result preprocessing","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFillChromPeaksStep3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fill chrom peak function 3 — cFillChromPeaksStep3","text":"preprocessed xcms object","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep1.html","id":null,"dir":"Reference","previous_headings":"","what":"Single file peak identification for parallel processing and/or RAM optimization — cFindChromPeaksStep1","title":"Single file peak identification for parallel processing and/or RAM optimization — cFindChromPeaksStep1","text":"function wrapper xcms::findChromPeaks function. designed used parallel processing /RAM optimization performs peak picking single files saves output rsd file. concatenate rsd outputs traditional XCMSnExp object use cFindChromPeaksStep2 function.","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single file peak identification for parallel processing and/or RAM optimization — cFindChromPeaksStep1","text":"","code":"cFindChromPeaksStep1(input, output, cwp, groups = NULL)"},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single file peak identification for parallel processing and/or RAM optimization — cFindChromPeaksStep1","text":"input filename mzML input files output output filename cwp native xcms CentWaveParam() function output groups group variable used new(\"NAnnotatedDataFrame\", data.frame(\"sample_name\"=sample_name, \"group\"=groups)). group variable might bias analysis big datasets might beneficial setting groups = None random group assignment","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single file peak identification for parallel processing and/or RAM optimization — cFindChromPeaksStep1","text":"peak picked files save_folder location (./tmp/peaks_identified)","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast concatenation of XCMS peak picked files — cFindChromPeaksStep2","title":"Fast concatenation of XCMS peak picked files — cFindChromPeaksStep2","text":"function concatenates files building string followed concatenation. way reduce running time n^2 n allowing us concatenate several thousand files minutes rather days.","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast concatenation of XCMS peak picked files — cFindChromPeaksStep2","text":"","code":"cFindChromPeaksStep2(inputs, output)"},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast concatenation of XCMS peak picked files — cFindChromPeaksStep2","text":"inputs peak picked files (>1 file names) output msnbase element peak picked files (file name)","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/cFindChromPeaksStep2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast concatenation of XCMS peak picked files — cFindChromPeaksStep2","text":"XCMSset ready peak grouping alignment","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/c_adjustRtimePeakGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxillary function for adjust R time function — c_adjustRtimePeakGroups","title":"Auxillary function for adjust R time function — c_adjustRtimePeakGroups","text":"Auxillary function adjust R time function","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/c_adjustRtimePeakGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxillary function for adjust R time function — c_adjustRtimePeakGroups","text":"","code":"c_adjustRtimePeakGroups(object, param = PeakGroupsParam())"},{"path":"https://johanlassen.github.io/cXCMS/reference/c_adjustRtimePeakGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxillary function for adjust R time function — c_adjustRtimePeakGroups","text":"object ms object param xcms::peakgroupsparam object","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/c_adjustRtimePeakGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxillary function for adjust R time function — c_adjustRtimePeakGroups","text":"pkGrp object","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/c_do_adjustRtime_peakGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — c_do_adjustRtime_peakGroups","title":"Title — c_do_adjustRtime_peakGroups","text":"Title","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/c_do_adjustRtime_peakGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — c_do_adjustRtime_peakGroups","text":"","code":"c_do_adjustRtime_peakGroups(   peaks,   peakIndex,   rtime,   minFraction = 0.9,   extraPeaks = 1,   smooth = c(\"loess\", \"linear\"),   span = 0.2,   family = c(\"gaussian\", \"symmetric\"),   peakGroupsMatrix = matrix(ncol = 0, nrow = 0),   subset = integer(),   subsetAdjust = c(\"average\", \"previous\") )"},{"path":"https://johanlassen.github.io/cXCMS/reference/c_do_adjustRtime_peakGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — c_do_adjustRtime_peakGroups","text":"peaks identified peaks positions peakIndex index peak rtime retention times samples minFraction minimum number samples feature exist qualify \"aligning feature\" extraPeaks many extra peaks allowed area alignment (can high large datasets high drift) smooth smoothing alignment span many features non-linear alignment model look simultaniously? close 0 models highly non-linear drift close 1 models linear drift family kind model peakGroupsMatrix groups (used minFraction) subset code rewritten subset option longer available. samples aligned. subsetAdjust see \"subset\"","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/c_do_adjustRtime_peakGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — c_do_adjustRtime_peakGroups","text":"adjusted rtimes","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/dot-checkdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create output dir — .checkdir","title":"Create output dir — .checkdir","text":"function utility function creates output directory already exist","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/dot-checkdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create output dir — .checkdir","text":"","code":".checkdir(output)"},{"path":"https://johanlassen.github.io/cXCMS/reference/dot-checkdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create output dir — .checkdir","text":"output output path","code":""},{"path":"https://johanlassen.github.io/cXCMS/reference/dot-checkdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create output dir — .checkdir","text":"None","code":""},{"path":[]},{"path":[]},{"path":"https://johanlassen.github.io/cXCMS/news/index.html","id":"cxcms-010","dir":"Changelog","previous_headings":"","what":"cXCMS 0.1.0","title":"cXCMS 0.1.0","text":"Initial CRAN submission.","code":""}]

}
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
getwd()
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
peak_files
inputs = peak_files
output = output_peak_identified
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
readr::write_rds(object, output)
name
name
name
name
name
name
name
View(peak2)
View(peak1)
View(peak2)
View(peak1)
View(peak2)
i=1
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
peaks_file
i=2
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
i=1
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
devtools::document()
devtools::document()
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
out.width = "100%"
)
devtools::load_all("masstools")
devtools::load_all("massdataset")
devtools::load_all("metid")
library(tidyverse)
load("test/test.database")
result2 <- metIdentify(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = massbank_database0.0.3, #snyder_database_rplc0.0.3
path=path
)
result1 <- metIdentify(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database,
path=path
)
result1 <- metIdentify(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database#,
#path=path
)
##creat a folder nameed as example
path <- file.path(".", "test")
dir.create(path = path, showWarnings = FALSE)
result2 <- metIdentify(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = massbank_database0.0.3, #snyder_database_rplc0.0.3
path=path
)
result1 <- metIdentify(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database,
path=path
)
result1 <- identify_metabolites(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database,
path=path
)
result1 <- identify_metabolites(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database,
path=path
)
result1 <- metIdentification(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database,
path=path
)
result1 <- metIdentify(
ms1.data = "ms1.peak.table_age.csv",
ms2.data = "TX41855.mzML",
ms1.ms2.match.mz.tol = 30,
ms1.ms2.match.rt.tol = 10,
ms1.match.ppm = 30,
ms2.match.ppm = 50,
ms2.match.tol = 0.4,
fraction.weight = 0.3,
dp.forward.weight = 0.6,
dp.reverse.weight = 0.1,
rt.match.tol = 60,
polarity = "positive",
ce="all",
column = "rp",
ms1.match.weight = 0.25,
rt.match.weight = 0.25,
ms2.match.weight = 0.5,
total.score.tol = 0.5,
candidate.num = 3,
database = test.database,
path=path
)
ms1.data = "ms1.peak.table_age.csv"
ms2.data = "TX41855.mzML"
ms1.ms2.match.mz.tol = 30
ms1.ms2.match.rt.tol = 10
ms1.match.ppm = 30
ms2.match.ppm = 50
ms2.match.tol = 0.4
fraction.weight = 0.3
dp.forward.weight = 0.6
dp.reverse.weight = 0.1
rt.match.tol = 60
polarity = "positive"
ce="all"
column = "rp"
ms1.match.weight = 0.25
rt.match.weight = 0.25
ms2.match.weight = 0.5
total.score.tol = 0.5
candidate.num = 3
database = test.database
path=path
threads = 3
###Check data
if (missing(database)) {
stop("No database is provided.\n")
}
##parameter specification
polarity <- match.arg(polarity)
polarity
column
##check ms1.file and ms2.file
file <- dir(path)
if (!all(ms1.data %in% file)) {
stop("MS1 data is not in the directory, please check it.\n")
}
if(!is(database, "databaseClass")){
if (!all(database %in% file)) {
stop("Database is not in this directory, please check it.\n")
}
}
#load database
if(!is(database, "databaseClass")){
database.name <- database
load(file.path(path, database.name))
database <- get(database.name)
}else{
database.name = paste(database@database.info$Source,
database@database.info$Version, sep = "_")
}
database.name
load(file.path(path, database.name))
database.name = paste(database@database.info$Source,
database@database.info$Version, sep = "_")
database.name
#------------------------------------------------------------------
##load adduct table
if (polarity == "positive" & column == "hilic") {
data("hilic.pos", envir = environment())
adduct.table <- hilic.pos
}
if (polarity == "positive" & column == "rp") {
data("rp.pos", envir = environment())
adduct.table <- rp.pos
}
if (polarity == "negative" & column == "hilic") {
data("hilic.neg", envir = environment())
adduct.table <- hilic.neg
}
if (polarity == "negative" & column == "rp") {
data("rp.neg", envir = environment())
adduct.table <- rp.neg
}
ms1.data <-
readr::read_csv(file = file.path(path, ms1.data),
col_types = readr::cols())

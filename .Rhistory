xcms::featureDefinitions(newFd) <- fdef
lockEnvironment(newFd, bindings = TRUE)
object@msFeatureData <- newFd
## Add a process history step
ph <-
xcms:::XProcessHistory(
param = param,
date. = date(),
type. = "Missing peak filling",
fileIndex = 1:length(fileNames(object)),
msLevel = msLevel
)
xset_integrated <- xcms:::addProcessHistory(object, ph) ## this validates the object.
save(xset_integrated, file = "./tmp/xset_integrated.Rdata")
return(xset_integrated)
}
save(prepared_data, file="./tmp/prepared_data.Rdata")
ms_integrated <- cfillChromPeaks(prepared_data = "./tmp/prepared_data.Rdata")
# Extract tabular data from XCMSnExp object
rtmz_intervals <- featureDefinitions(ms_integrated)
feat_intensity <- featureValues(ms_integrated)
# featureValues(xset_integrated, method = "medret", value = "into") %>% as_tibble() %>% head()
tabular_data   <- cbind(rtmz_intervals, feat_intensity) %>% as_tibble()
# featureValues(xset_integrated, method = "medret", value = "into") %>% as_tibble() %>% head()
tabular_data   <- cbind(rtmz_intervals, feat_intensity)
tabular_data
tabular_data$peakidx
# featureValues(xset_integrated, method = "medret", value = "into") %>% as_tibble() %>% head()
tabular_data   <- cbind(rtmz_intervals, feat_intensity) |> as.data.frame()
tabular_data
dir.create("./results")
if(!dir.exists("./results/") dir.create("./results")
if(!dir.exists("./results/") { dir.create("./results") }
if(!dir.exists("./results")) { dir.create("./results") }
write_csv(tabular_data, "./results/xcms_preprocessed.csv")
write.csv(tabular_data, "./results/xcms_preprocessed.csv")
tabular_data$peakidx <- NULL
write.csv(tabular_data, "./results/xcms_preprocessed.csv")
# clean all intermediate files
file.remove("./tmp/*")
# clean all intermediate files
file.remove("./tmp/")
# clean all intermediate files
file.remove("./tmp")
dir.exists("./tmp")
# clean all intermediate files
file.remove("./tmp")
# clean all intermediate files
unlink("tmp", recursive = TRUE)
library(cXCMS)
devtools::build_vignettes()
usethis::use_vignette()
usethis::use_vignette(name = "Tutorial")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
usethis::create_package("./")
usethis::create_package("../parallelxcms")
usethu
usethis::use_readme_rmd()
![workflow](./images/workflow.png, "I'm Vipul")
library(cXCMS)
library(cXCMS)
library(cXCMS)
library(xcms)
source("~/.active-rstudio-document", echo=TRUE)
typeof("hej")=="string"
typeof("hej")=="character"
list.files(files)
files <- "/media/johan/Crucial X6/twin_study_blood_plasma/MSV000082374/peak/Samples"
list.files(files)
list.files(files, full.names = T)
library(tidyverse)
processing_info <-
tibble(file_name = list.files(files, full.names = F),
sample_name = gsub("[.].*", "", file_name),
full_path = list.files(files, full.names = T),
peak_called = gsub("peak.*", "peak", full_path))
processing_info
peak_called = gsub("peak.*", "peak", sample_name))
peak_called = paste0(gsub("peak.*", "peak", full_path), "_peaksIdentified.Rdata") # name the outputs of the peak identification
peak_called = paste0(gsub("peak.*", "peak", full_path), "_peaksIdentified.Rdata")) # name the outputs of the peak identification
(processing_info <-
tibble(file_name = list.files(files, full.names = F), # get only the file names
sample_name = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path = list.files(files, full.names = T), # get the full path of the files
peak_called = paste0(gsub("peak.*", "peak", full_path), "_peaksIdentified.Rdata")) # name the outputs of the peak identification
)
(processing_info <-
tibble(file_name = list.files(files, full.names = F), # get only the file names
sample_name = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path = list.files(files, full.names = T), # get the full path of the files
peak_called = paste0("/peaks_identified/", gsub("peak.*", "peak", full_path), "_peaksIdentified.Rdata")) # name the outputs of the peak identification
)
(processing_info <-
tibble(file_name = list.files(files, full.names = F), # get only the file names
sample_name = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path = list.files(files, full.names = T), # get the full path of the files
peak_called = paste0(gsub("peak.*", "peak", full_path), "/peaks_identified/", sample_name, "_peaksIdentified.Rdata")) # name the outputs of the peak identification
)
working_directory <- getwd()
working_directory
(processing_info <-
tibble(file_name       = list.files(files, full.names = F), # get only the file names
sample_name     = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path       = list.files(files, full.names = T), # get the full path of the files
base_directory  = gsub("peak.*", "peak", full_path),
peak_called     = paste0(base_directory, "/peaks_identified/", sample_name, "_peaksIdentified.Rdata"), # name the outputs of the peak identification
collected_peaks = paste0(base_directory, "/peaks_identified.Rdata") # File that should contain all samples of the peak picking
)
)
devtools::load_all(".")
install.packages("xcms")
BiocManager::install("xcms")
library(gbm)
library(randomForest)
library(BART)
df  <- read_rds("karmen_data_with_sex_and_age.rds")
source("~/.active-rstudio-document", echo=TRUE)
files <- "~/Documents/lcms_exampledata"
peak_folder <- dir.create(paste0(files, "/peaks_identified/"))
(processing_info <-
tibble(file_name       = list.files(files, full.names = F), # get only the file names
sample_name     = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path       = list.files(files, full.names = T), # get the full path of the files
base_directory  = files,
peak_called     = paste0(peak_folder, sample_name, "_peaksIdentified.Rdata"), # name the outputs of the peak identification
collected_peaks = paste0(base_directory, "/peaks_identified.Rdata") # File that should contain all samples of the peak picking (constant vector)
)
)
cwp <- CentWaveParam()
for (row in 1:nrow(processing_info)){
print(paste0("Calculating file: ", row, " of ", nrow(processing_info)))
input  <- processing_info$full_path[row]
output <- processing_info$peak_called[row]
cXCMS::cFindChromPeaks(input = input, output = output, cwp = cwp)
}
files <- "~/Documents/lcms_exampledata"
peak_folder <- dir.create(paste0(files, "/peaks_identified/"))
(processing_info <-
tibble(file_name       = list.files(files, full.names = F), # get only the file names
sample_name     = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path       = list.files(files, full.names = T), # get the full path of the files
base_directory  = files,
peak_called     = paste0(peak_folder, sample_name, "_peaksIdentified.Rdata"), # name the outputs of the peak identification
collected_peaks = paste0(base_directory, "/peaks_identified.Rdata") # File that should contain all samples of the peak picking (constant vector)
)
)
files <- "~/Documents/lcms_exampledata"
peak_folder <- paste0(files, "/peaks_identified/")
dir.create(peak_folder)
(processing_info <-
tibble(file_name       = list.files(files, full.names = F), # get only the file names
sample_name     = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path       = list.files(files, full.names = T), # get the full path of the files
base_directory  = files,
peak_called     = paste0(peak_folder, sample_name, "_peaksIdentified.Rdata"), # name the outputs of the peak identification
collected_peaks = paste0(base_directory, "/peaks_identified.Rdata") # File that should contain all samples of the peak picking (constant vector)
)
)
cwp <- CentWaveParam()
for (row in 1:nrow(processing_info)){
print(paste0("Calculating file: ", row, " of ", nrow(processing_info)))
input  <- processing_info$full_path[row]
output <- processing_info$peak_called[row]
cXCMS::cFindChromPeaks(input = input, output = output, cwp = cwp)
}
cXCMS::collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
cwp <- CentWaveParam()
for (row in 1:nrow(processing_info)){
print(paste0("Calculating file: ", row, " of ", nrow(processing_info)))
input  <- processing_info$full_path[row]
output <- processing_info$peak_called[row]
cXCMS::cFindChromPeaks(input = input, output = output, cwp = cwp)
}
cwp <- CentWaveParam()
for (row in 1:nrow(processing_info)){
print(paste0("Calculating file: ", row, " of ", nrow(processing_info)))
input  <- processing_info$full_path[row]
output <- processing_info$peak_called[row]
cXCMS::cFindChromPeaks(input = input, output = output, cwp = cwp)
}
files <- "~/Documents/lcms_exampledata"
peak_folder <- paste0(files, "/peaks_identified/")
(processing_info <-
tibble(file_name       = list.files(files, full.names = F), # get only the file names
sample_name     = gsub("[.].*", "", file_name), # remove the file type from file names to get sample name
full_path       = list.files(files, full.names = T), # get the full path of the files
base_directory  = files,
peak_called     = paste0(peak_folder, sample_name, "_peaksIdentified.Rdata"), # name the outputs of the peak identification
collected_peaks = paste0(base_directory, "/peaks_identified.Rdata") # File that should contain all samples of the peak picking (constant vector)
)
)
dir.create(peak_folder)
cwp <- CentWaveParam()
for (row in 1:nrow(processing_info)){
print(paste0("Calculating file: ", row, " of ", nrow(processing_info)))
input  <- processing_info$full_path[row]
output <- processing_info$peak_called[row]
cXCMS::cFindChromPeaks(input = input, output = output, cwp = cwp)
}
processing_info$file_name[41]
# Ensure all input files are mzML files
processing_info <- processing_info[grepl("mzML|mzXML", processing_info$file_name)]
# Ensure all input files are mzML files
processing_info <- processing_info[grepl("mzML|mzXML", processing_info$file_name),]
processing_info
cwp <- CentWaveParam()
for (row in 1:nrow(processing_info)){
print(paste0("Calculating file: ", row, " of ", nrow(processing_info)))
input  <- processing_info$full_path[row]
output <- processing_info$peak_called[row]
cXCMS::cFindChromPeaks(input = input, output = output, cwp = cwp)
}
cXCMS::collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
processing_info$collected_peaks
processing_info$peak_called
cXCMS::collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
library(cXCMS)
cXCMS::collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
processing_info$collected_peaks
cXCMS::collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
processing_info$peak_called
length(processing_info$peak_called)
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output)
}
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
print("Hej")
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output)
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
print("Hej")
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output)
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
print(i)
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output)
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
print(i)
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
print(concatenate_string)
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output)
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
print(i)
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
print(parse(text = concatenate_string))
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output)
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
print(i)
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
parsed_string <- parse(text = concatenate_string)
xset_peaksIdentified <- eval(parsed_string)
save(xset_peaksIdentified, file = output)
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
processing_info$collected_peaks
a = "hej"
a[1]
#' Fast concatenation of XCMS peak picked files
#'
#' @param inputs the peak picked files
#' @param output the msnbase element of peak picked files
#' @import xcms
#' @return an XCMSset ready for peak grouping and alignment
#' @export
collect_files <- function(inputs, output){
## This function concatenates the files by building a string followed by concatenation.
## By doing it this way we reduce running time from n^2 to n allowing us to concatenate several thousand files in minutes rather than days.
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
print(i)
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
load(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
xset_peaksIdentified <- eval(parse(text = concatenate_string))
save(xset_peaksIdentified, file = output[1])
}
collect_files(processing_info$peak_called, output = processing_info$collected_peaks)
library(cXCMS)
load(processing_info$collected_peaks[1])
pgp <- xcms::PeakGroupsParam()
xset <- xcms::groupChromPeaks(xset_peaksIdentified, pgp)
pdp <- PeakDensityParam(sampleGroups=xset_peaksIdentified@phenoData@data$sample_group,
bw           = 10,
minFraction  = 0.5)
pdp <- xcms::PeakDensityParam(sampleGroups=xset_peaksIdentified@phenoData@data$sample_group,
bw           = 10,
minFraction  = 0.5)
xset_peaksIdentified@phenoData@data$sample_name
xset_peaksIdentified@phenoData@data$group
pdp <- xcms::PeakDensityParam(sampleGroups=xset_peaksIdentified@phenoData@data$group,
bw           = 10,
minFraction  = 0.5)
xset_grouped_first <- groupChromPeaks(xset_peaksIdentified, param=pdp)
## Adjust the remaining samples.
rtime_adj <- xcms:::adjustRtimeSubset(rtime, rtime_adj, subset = subset, method = subsetAdjust)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(cXCMS)
install.packages("xcms")
BiocManager::install("xcms")
BiocManager::install("xcms")
BiocManager::install("xcms")
BiocManager::install("xcms")
install.packages("igraph")
BiocManager::install("xcms")

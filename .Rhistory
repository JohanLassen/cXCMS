readr::write_rds(msobject, output_integration_ready)
fcp           <- FillChromPeaksParam(expandMz = 0, expandRt = 0)
fcp
prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = )
prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = "./tmp/integration_package.rds")
prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = output)
fcp           <- FillChromPeaksParam(expandMz = 0, expandRt = 0)
output        <- "./tmp/integration_package.rds"
prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = output)
input = output_integration_ready
fcp = fcp
output = output
msLevel = 1L
object <- readr::read_rds(input)
getwd()
setwd("./vignettes")
msLevel = 1L
object <- readr::read_rds(input)
object
if (!xcms::hasFeatures(object)){stop("No feature definitions for MS level ", msLevel," present. Please run 'groupChromPeaks' first.")}
if (.hasFilledPeaks(object)) {message("Filled peaks already present, adding still missing", " peaks.")}
if (.hasFilledPeaks(object)) {message("Filled peaks already present, adding still missing", " peaks.")}
.hasFilledPeaks   <- utils::getFromNamespace(".hasFilledPeaks", "xcms")
.param2string     <- utils::getFromNamespace(".param2string", "xcms")
.getChromPeakData <- utils::getFromNamespace(".getChromPeakData", "xcms")
.copy_env         <- utils::getFromNamespace(".copy_env", "xcms")
XProcessHistory   <- utils::getFromNamespace("XProcessHistory", "xcms")
addProcessHistory <- utils::getFromNamespace("addProcessHistory", "xcms")
.get_closest_index <- utils::getFromNamespace(".get_closest_index", "xcms")
if (.hasFilledPeaks(object)) {message("Filled peaks already present, adding still missing", " peaks.")}
expandMz  <- xcms::expandMz(fcp)
expandRt  <- xcms::expandRt(fcp)
fixedMz   <- xcms::fixedMz(fcp)
fixedRt   <- xcms::fixedRt(fcp)
ppm       <- xcms::ppm(fcp)
## Define or extend the peak area from which the signal should be
## extracted.
fdef       <- xcms::featureDefinitions(object)
tmp_pks    <- xcms::chromPeaks(object)[, c("rtmin", "rtmax", "mzmin","mzmax")]
aggFunLow  <- stats::median
aggFunHigh <- stats::median
pkArea <- do.call(
rbind,
lapply(
fdef$peakidx,
function(z) {
pa <- c(
aggFunLow(tmp_pks[z, 1]), aggFunHigh(tmp_pks[z, 2]), # Retention times
aggFunLow(tmp_pks[z, 3]), aggFunHigh(tmp_pks[z, 4])  # m/z ratios
)
## Check if we have to apply ppm replacement:
if (ppm != 0) {
mzmean <- mean(pa[3:4])
tittle <- mzmean * (ppm / 2) / 1E6
if ((pa[4] - pa[3]) < (tittle * 2)) {
pa[3] <- mzmean - tittle
pa[4] <- mzmean + tittle
}
}
## Expand it.
if (expandRt != 0) {
diffRt <- (pa[2] - pa[1]) * expandRt / 2
pa[1] <- pa[1] - diffRt
pa[2] <- pa[2] + diffRt
}
if (expandMz != 0) {
diffMz <- (pa[4] - pa[3]) * expandMz / 2
pa[3] <- pa[3] - diffMz
pa[4] <- pa[4] + diffMz
}
if (fixedMz != 0) {
pa[3] <- pa[3] - fixedMz
pa[4] <- pa[4] + fixedMz
}
if (fixedRt != 0) {
pa[1] <- pa[1] - fixedRt
pa[2] <- pa[2] + fixedRt
}
pa
}
))
rm(tmp_pks)
## Add mzmed column - needed for MSW peak filling.
colnames(pkArea) <- c("rtmin", "rtmax", "mzmin", "mzmax")
pkArea           <- cbind(group_idx = 1:nrow(pkArea),
pkArea,
mzmed = as.numeric(fdef$mzmed))
pkGrpVal         <- xcms::featureValues(object, value = "index")
## Check if there is anything to fill...
if (!any(is.na(rowSums(pkGrpVal)))) {
message("No missing peaks present.")
return(object)
}
## Split the object by file and define the peaks for which
objectL <- vector("list", length(MSnbase::fileNames(object)))
pkAreaL <- objectL
## We need "only" a list of OnDiskMSnExp, one for each file but
## instead of filtering by file we create small objects to keep
## memory requirement to a minimum.
req_fcol  <- MSnbase::requiredFvarLabels("OnDiskMSnExp")
min_fdata <- object@featureData@data[, req_fcol]
rt_range  <- range(pkArea[, c("rtmin", "rtmax")])
if (xcms::hasAdjustedRtime(object))
min_fdata$retentionTime <- xcms::adjustedRtime(object)
for (i in 1:length(MSnbase::fileNames(object))) {
fd <- min_fdata[min_fdata$fileIdx == i, ]
fd$fileIdx <- 1L
objectL[[i]] <- new(
"OnDiskMSnExp",
processingData = new("MSnProcess",
files = MSnbase::fileNames(object)[i]),
featureData = new("AnnotatedDataFrame", fd),
phenoData = new("NAnnotatedDataFrame",
data.frame(sampleNames = "1")),
experimentData = new("MIAPE",
instrumentManufacturer = "a",
instrumentModel = "a",
ionSource = "a",
analyser = "a",
detectorType = "a"))
## Extract intensities only for peaks that were not found in a sample.
pkAreaL[[i]] <- pkArea[is.na(pkGrpVal[, i]), , drop = FALSE]
}
rm(pkGrpVal)
rm(pkArea)
rm(min_fdata)
ph <- processHistory(object, type = "Peak detection")
findPeakMethod <- "unknown"
mzCenterFun <- "wMean"
if (length(ph)) {
if (is(ph[[1]], "XProcessHistory")) {
prm <- ph[[1]]@fcp
findPeakMethod <- .param2string(prm)
## Check if the param class has a mzCenterFun slot
if (.hasSlot(prm, "mzCenterFun"))
mzCenterFun <- prm@mzCenterFun
}
}
is(ph[[1]], "XProcessHistory"))
is(ph[[1]], "XProcessHistory")
is(ph[[1]], "XProcessHistory")
is(ph[[1]], "XProcessHistory")
ph[[1]]@fcp
ph[[1]]@fcp
ph[[1]]@fcp
ph[[1]]@fcp
ph[[1]]@fcp
ph
ph <- processHistory(object, type = "Peak detection")
ph
ph <- processHistory(object, type = "Peak detection")
ph
findPeakMethod <- "unknown"
mzCenterFun <- "wMean"
if (length(ph))
if (length(ph))
if (length(ph))
if (length(ph))
.param2string(prm)
.param2string(prm)
ph[[1]]@fcp
fcp
ph[[1]]
ph[[1]]
ph[[2]]
.param2string(fcp)
.param2string(fcp)
.param2string(fcp)
fcp
.param2string(ph[[2]])
findPeakMethod <- .param2string(ph[[1]]@)
findPeakMethod <- .param2string(ph[[1]]@param)
findPeakMethod
prm <- ph[[1]]@param
findPeakMethod <- .param2string(ph[[1]])
## Check if the param class has a mzCenterFun slot
if (.hasSlot(prm, "mzCenterFun"))
mzCenterFun <- prm@mzCenterFun
if (is(ph[[1]], "XProcessHistory")) {
prm <- ph[[1]]@param
findPeakMethod <- .param2string(ph[[1]])
## Check if the param class has a mzCenterFun slot
if (.hasSlot(prm, "mzCenterFun"))
mzCenterFun <- prm@mzCenterFun
}
(.hasSlot(prm, "mzCenterFun")
(.hasSlot(prm, "mzCenterFun")
)
)
(.hasSlot(prm, "mzCenterFun"))
prm@mzCenterFun
mzCenterFun <- prm@mzCenterFun
cp_colnames <- colnames(xcms::chromPeaks(object))
## Now rename that to the correct function name in xcms.
mzCenterFun <- paste("mzCenter", gsub(mzCenterFun, pattern = "mzCenter.", replacement = "", fixed = TRUE), sep=".")
prepared_data <- list("fdef"=fdef,
"mzCenterFun"=mzCenterFun,
"object"=object,
"pkAreaL"=pkAreaL,
"objectL"=objectL,
"sampleIndex"=as.list(1:length(objectL)),
"cp_colnames"=cp_colnames,
"param" = fcp)
readr::write_rds(prepared_data, output)
return()
library(cXCMS)
150*150
/2
(150*150)/2
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
msobject <- readr::read_rds(output_peak_identified)
pdp      <- xcms::PeakDensityParam(sampleGroups = msobject@phenoData@data$group)
msobject <- groupChromPeaks(msobject, pdp)
pgp      <- xcms::PeakGroupsParam()
msobject <- adjustRtime(msobject, pgp)
pdp      <- xcms::PeakDensityParam(sampleGroups = msobject@phenoData@data$group)
msobject <- groupChromPeaks(msobject, pdp)
output_integration_ready <- "./tmp/integration_ready.rds"
readr::write_rds(msobject, output_integration_ready)
fcp           <- FillChromPeaksParam(expandMz = 0, expandRt = 0)
output_step1  <- "./tmp/integration_package.rds"
prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = output)
output_step1  <- "./tmp/integration_package.rds"
prepared_data <- cXCMS::cFillChromPeaksStep1(input = output_integration_ready, fcp = fcp, output = output_step1)
peak_files
# Change subdir from peak_picked to integrated for the output files (n=sample size) of cFillChromPeaksStep2 step
integration_files <- gsub("peak_picked", "integrated", peak_files)
integration_files
# Change subdir from peak_picked to integrated for the output files (n=sample size) of cFillChromPeaksStep2 step
integration_files <- gsub("peak_picked", "integrated", peak_files)
for (i in seq_along(integration_files)){
cFillChromPeaksStep2(input = output_step1, output = integration_files[i], index = i)
}
library(cXCMS)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
library(cXCMS)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
library(cXCMS)
library(xcms)
library(msdata)
library(MsExperiment)
data_files <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
data_files
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
getwd()
peak_directory <- "./tmp/peak_picked"
dir.create(peak_directory, recursive = TRUE, showWarnings = FALSE)
peak_files <- paste0(peak_directory, gsub(".*/", "/", data_files))
peak_files <- gsub(".mzML", ".rds", peak_files)
peak_files <- gsub("-", "_", peak_files)
peak_files
# Set the peak picking parameters
cwp <- CentWaveParam()
for (i in seq_along(data_files)){
input  <- data_files[i]
output <- peak_files[i]
# if file exists continue
if (file.exists(output)) next
cXCMS::cFindChromPeaksStep1(input = input, output = output, cwp = cwp)
}
output_peak_identified <- "./tmp/peak_picked_dataset.rds"
cFindChromPeaksStep2(inputs = peak_files, output = output_peak_identified)
peak_files
inputs = peak_files
output = output_peak_identified
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
readr::write_rds(object, output)
name
name
name
name
name
name
name
View(peak2)
View(peak1)
View(peak2)
View(peak1)
View(peak2)
i=1
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
peaks_file
i=2
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
i=1
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
if (length(inputs)<2){
stop("Less than two files in the inputs. Please use *all* peak called files as a vector in the inputs parameter")}
# First element of string
concatenate_string <- "c("
for (i in 1:length(inputs)){
# arbitrary name for the concatenated list
name <- paste0("peak", i)
file <- inputs[i]
peaks_file <- readr::read_rds(file) # loads XCMSnExp object w. identified peaks
assign(name, peaks_file)
# Prepare for another file...
if (i<length(inputs)){concatenate_string <- paste0(c(concatenate_string, name, ","), collapse = "")}
# Or end the concatenation function c()
if (i==length(inputs)){concatenate_string <- paste0(c(concatenate_string,  name, ")"), collapse = "")}
}
# Evaluate string
object <- eval(parse(text = concatenate_string))
